Copilot
To use User Secrets in a C# Windows Forms application, you can securely store sensitive data (like API keys or connection strings) during development without hardcoding them into your source code.

âœ… Step-by-Step Guide to Use User Secrets in Windows Forms
ðŸ”¹ 1. Install Required Package
In your project directory or terminal:

dotnet add package Microsoft.Extensions.Configuration.UserSecrets


ðŸ”¹ 2. Enable User Secrets in Your Project
Run this command in your project folder:

dotnet user-secrets init


This adds a UserSecretsId to your .csproj file:
<PropertyGroup>
  <UserSecretsId>your-guid-here</UserSecretsId>
</PropertyGroup>


ðŸ”¹ 3. Add Secrets
Use this command to add a secret:
dotnet user-secrets set "MySecretKey" "SuperSecretValue"



ðŸ”¹ 4. Read Secrets in Your Code
Add these NuGet packages if not already present:

dotnet add package Microsoft.Extensions.Configuration
dotnet add package Microsoft.Extensions.Configuration.Json
dotnet add package Microsoft.Extensions.Configuration.UserSecrets






Then in your code (e.g., Form1.cs):


using Microsoft.Extensions.Configuration;
using System;
using System.IO;
using System.Windows.Forms;

public partial class Form1 : Form
{
    private IConfiguration _configuration;

    public Form1()
    {
        InitializeComponent();
        LoadSecrets();
    }

    private void LoadSecrets()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddUserSecrets<Form1>();

        _configuration = builder.Build();

        string secretValue = _configuration["MySecretKey"];
        MessageBox.Show($"Secret: {secretValue}");
    }
}
